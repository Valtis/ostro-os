java.in: Do not use hardcode paths

Cacao uses hardcoded paths to various files, if these paths are not
provided. This causes issues when sharing sstate with otherwise
identical workers, if build time paths are not identical.

Signed-off-by: Erkka Kääriä <erkka.kaaria@intel.com>
---
 cacao-1.6.1/src/scripts/java.in | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git cacao-1.6.1/src/scripts/java.in cacao-1.6.1/src/scripts/java.in
index 0790f02..b6cc24a 100644
--- cacao-1.6.1/src/scripts/java.in
+++ cacao-1.6.1/src/scripts/java.in
@@ -23,4 +23,17 @@
 ## 02110-1301, USA.

 IFS=""
-exec $(dirname ${0})/cacao ${1+"$@"}
+SH_DIR=`dirname "$0"`
+CURRENT_DIR=`cd "${SH_DIR}" && pwd`
+
+# if this shell script is invoked through symlink, we get invalid paths. Instead, use python to check the path behind the link
+# this becomes incredibly painful, we he have to use shell script, so use python instead.
+PYTHON_STR="import os; print os.path.dirname(os.path.realpath(os.readlink(\"${CURRENT_DIR}/java\"))) if os.path.islink(\"${CURRENT_DIR}/java\") else \"${CURRENT_DIR}\""
+REAL_DIR=`python -c ${PYTHON_STR}`
+
+PARENT_DIR=`dirname ${REAL_DIR}`
+
+export BOOTCLASSPATH="${PARENT_DIR}/share/cacao/vm.zip:${PARENT_DIR}/share/classpath/glibj.zip"
+LIBRARY_PATH="-Djava.library.path=${PARENT_DIR}/lib/classpath"
+exec ${REAL_DIR}/cacao ${LIBRARY_PATH} ${1+"$@"}
+
--
2.7.4

